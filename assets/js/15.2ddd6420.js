(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{289:function(t,s,a){"use strict";a.r(s);var n=a(14),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"base64"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#base64"}},[t._v("#")]),t._v(" Base64")]),t._v(" "),s("p",[t._v("目前Base64已经成为网络上常见的传输8Bit字节代码的编码方式之一。在做支付系统时，系统之间的报文交互都需要使用Base64对明文进行转码，然后再进行签名或加密，之后再进行（或再次Base64）传输。那么，Base64到底起到什么作用呢？")]),t._v(" "),s("p",[t._v("在参数传输的过程中经常遇到的一种情况：使用全英文的没问题，但一旦涉及到中文就会出现乱码情况。与此类似，网络上传输的字符并不全是可打印的字符，比如二进制文件、图片等。Base64的出现就是为了解决此问题，它是基于64个可打印的字符来表示二进制的数据的一种方法。")]),t._v(" "),s("p",[t._v("电子邮件刚问世的时候，只能传输英文，但后来随着用户的增加，中文、日文等文字的用户也有需求，但这些字符并不能被服务器或网关有效处理，因此Base64就登场了。随之，Base64在URL、Cookie、网页传输少量二进制文件中也有相应的使用。")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"base64的编码原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#base64的编码原理"}},[t._v("#")]),t._v(" Base64的编码原理")]),t._v(" "),s("p",[t._v("Base64的原理比较简单，每当我们使用Base64时都会先定义一个类似这样的数组：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("['A', 'B', 'C', ... 'a', 'b', 'c', ... '0', '1', ... '+', '/']\n")])])]),s("p",[t._v("Base64 是一种基于 64 个可打印字符来表示二进制数据的表示方法。由于 2^6=64，所以每 6 个比特为一个单元，对应某个可打印字符。3 个字节有 24 个比特，对应于 4 个 Base64 单元，即 3 个字节可由 4 个可打印字符来表示。")]),t._v(" "),s("p",[t._v("Base64的对应索引值如下")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://joker-1317382260.cos.ap-guangzhou.myqcloud.com/202303271041005.webp",alt:"Img"}})]),t._v(" "),s("p",[t._v("编码时，每 3 个字节一组，共 8bit*3=24bit，划分成 4 组，即每 6bit 代表一个编码后的索引值")]),t._v(" "),s("p",[t._v("划分如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://joker-1317382260.cos.ap-guangzhou.myqcloud.com/202303271042400.webp",alt:"Img"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://joker-1317382260.cos.ap-guangzhou.myqcloud.com/202303271042445.webp",alt:"Img"}})]),t._v(" "),s("p",[t._v("可以看到 cat 编码后变成了 Y2F0。")]),t._v(" "),s("p",[t._v("如果待编码内容的字节数不是 3 的整数倍，那需要进行一些额外的处理。")]),t._v(" "),s("p",[t._v("如果最后剩下 1 个字节，那么将补 4 个 0 位，编码成 2 个 Base64 字符，然后补两个 =：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://joker-1317382260.cos.ap-guangzhou.myqcloud.com/202303271043759.webp",alt:"Img"}})]),t._v(" "),s("p",[t._v("如果最后剩下 2 个字节，那么将补 2 个 0 位，编码成 3 个 Base64 字符，然后补一个 =：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://joker-1317382260.cos.ap-guangzhou.myqcloud.com/202303271043411.webp",alt:"Img"}})]),t._v(" "),s("h3",{attrs:{id:"个人的通俗理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#个人的通俗理解"}},[t._v("#")]),t._v(" 个人的通俗理解")]),t._v(" "),s("p",[t._v("Base64的本质其实就是将需要加密的字符转化为这个字符的二进制ASCII码。")]),t._v(" "),s("p",[t._v("而二进制的ASCII码刚刚好对应8位,而Base64是以6个二进制为一位。")]),t._v(" "),s("p",[t._v("如果加密的原文不够24bit，最后会以==做替补。")]),t._v(" "),s("p",[t._v("编码的过程中就是将需加密的原文转换为2进制的ASCII码，然后每6个相邻的二进制数转化为十进制")]),t._v(" "),s("p",[t._v("这个转化后的十进制就刚刚好对应的是Base64的索引值，即可成功加密。")]),t._v(" "),s("p",[t._v("如果遇见位数不足的情况下则补0处理，如果一个字节里全是也就是空的情况下，补一个=")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://joker-1317382260.cos.ap-guangzhou.myqcloud.com/202303271058222.webp",alt:"Img"}})]),t._v(" "),s("h3",{attrs:{id:"使用python自带的库可以快速简便的将base64加解密"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用python自带的库可以快速简便的将base64加解密"}},[t._v("#")]),t._v(" 使用Python自带的库可以快速简便的将base64加解密")]),t._v(" "),s("p",[t._v("下面附上完整源码：")]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" base64\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" binascii\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("encode_base64")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string_1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            input_bytes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" string_1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("encode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf-8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            encoded_bytes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" base64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b64encode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input_bytes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" encoded_bytes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("decode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf-8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("decode_base64")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string_2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            encoded_bytes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" string_2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("encode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf-8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            decoded_bytes "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" base64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b64decode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("encoded_bytes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" decoded_bytes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("decode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf-8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'__main__'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n--------------------------------"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"注：如果解不出则是base64编码格式有误"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                choice "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'请选择编码 (e) 或解码 (d) 退出(b)'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" choice "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'e'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    string_1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'请输入要编码的字符串: '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("encode_base64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string_1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    xml3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"继续(1)\\n退出(0)"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" xml3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" xml3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                        exit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                        xml3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'无效选择,按回车键自动重启'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" choice "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    string_2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'请输入要解码的 base64 字符串: '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("decode_base64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string_2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    xml "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"继续(1)\\n退出(0)"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" xml "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" xml "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                        exit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                        xml "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'无效选择,按回车键自动重启'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" choice "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    exit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'无效选择!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    xml2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"继续(1)\\n退出(0)"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" xml2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" xml2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                        exit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                        xml2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("input")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'无效选择,按回车键自动重启'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("except")]),t._v(" binascii"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n\\n解码的字符串不符合base64的格式！'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("except")]),t._v(" UnicodeDecodeError"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n\\n解码的字符串不符合base64的格式！'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("except")]),t._v(" MemoryError"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n\\n输入字符过长无法处理.......'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("当然上面是一个完整的加解密程序，如果只是像单独完成一个解码工作就不需要这么麻烦甚至可以只在cmd中完成，下面是使用cmd进行解码")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("python\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" base64\nstring "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'base64字符串'")]),t._v("\ncode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" base64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b64decode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("这样在cmd中就会输出对应的解码后的原文")]),t._v(" "),s("h2",{attrs:{id:"rsa加解密原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rsa加解密原理"}},[t._v("#")]),t._v(" RSA加解密原理")]),t._v(" "),s("p",[t._v("CTF密码学类题目中，RSA加密可谓是很重要且常见的加密类型，今天就总结下 RSA加密的原理及解密方法。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://joker-1317382260.cos.ap-guangzhou.myqcloud.com/202303271604260.webp",alt:"Img"}})]),t._v(" "),s("h3",{attrs:{id:"加密过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加密过程"}},[t._v("#")]),t._v(" 加密过程")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://joker-1317382260.cos.ap-guangzhou.myqcloud.com/202303271605859.webp",alt:"Img"}})]),t._v(" "),s("h3",{attrs:{id:"rsa算法简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rsa算法简介"}},[t._v("#")]),t._v(" RSA算法简介：")]),t._v(" "),s("ul",[s("li",[t._v("RSA加密算法是属于非对称加密算法的一种，相比起对称加密的MD5算法来说，他具有可逆的优点")])]),t._v(" "),s("h3",{attrs:{id:"数学基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数学基础"}},[t._v("#")]),t._v(" 数学基础")]),t._v(" "),s("h4",{attrs:{id:"一、素数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、素数"}},[t._v("#")]),t._v(" 一、素数")]),t._v(" "),s("p",[t._v("素数又称质数，指在一个大于1的自然数中，除了1和此整数自身外，不能被其他自然数整除的数。")]),t._v(" "),s("h4",{attrs:{id:"二、模运算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、模运算"}},[t._v("#")]),t._v(" 二、模运算")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("模运算即求余运算。“模”是“Mod”的音译。和模运算紧密相关的一个概念是“同余”。数学上，当两个整数除以同一个正整数，若得相同余数，则二整数同余。")])]),t._v(" "),s("li",[s("p",[t._v("两个整数a，b，若它们除以正整数m所得的余数相等，则称a，b对于模m同余，记作: a ≡ b \\ (mod m)；读作：a同余于b模m，或者，a与b关于模m同余。例如：26 ≡ 14 \\ (mod 12)。")])])]),t._v(" "),s("h4",{attrs:{id:"三、互质关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、互质关系"}},[t._v("#")]),t._v(" 三、互质关系")]),t._v(" "),s("p",[t._v("如果两个正整数，除了1以外，没有其他公因子，我们就称这两个数是互质关系（coprime）。比如，15和32没有公因子，所以它们是互质关系。这说明，不是质数也可以构成互质关系。")]),t._v(" "),s("p",[t._v("由互质关系，得到以下结论：")]),t._v(" "),s("ul",[s("li",[t._v("任意两个质数构成互质关系，比如17和53。")]),t._v(" "),s("li",[t._v("一个数是质数，另一个数只要不是前者的倍数，两者就构成互质关系，比如3和10.")]),t._v(" "),s("li",[t._v("如果两个数之中，较大的那个数是质数，则两者构成互质关系，比如97和57.")]),t._v(" "),s("li",[t._v("1和任意一个自然数都是互质关系，比如1和88。")]),t._v(" "),s("li",[t._v("p是大于一的整数，则p和p-1构成互质关系，比如57和56。")]),t._v(" "),s("li",[t._v("p是大于一的奇数，则p和p-2构成互质关系，比如17和15。")])]),t._v(" "),s("h4",{attrs:{id:"四、欧拉函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、欧拉函数"}},[t._v("#")]),t._v(" 四、欧拉函数")]),t._v(" "),s("p",[t._v("假如任意给定正整数n，请问在小于等于n的正整数之中，有多少个与n构成互质关系？（比如，在1到8之中，有多少个数与8构成互质关系？)")]),t._v(" "),s("p",[t._v("计算这个值的方法就叫做欧拉函数，以φ(n)表示。在1到8之中，与8形成互质关系的是1、3、5、7，所以 φ(n) = 4。")]),t._v(" "),s("p",[t._v("φ(n)的计算方法并不复杂，但是为了得到最后那个公式，需要一步步讨论。")]),t._v(" "),s("h5",{attrs:{id:"第一种情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一种情况"}},[t._v("#")]),t._v(" 第一种情况")]),t._v(" "),s("p",[t._v("如果n=1，则 φ(1) = 1 。因为1与任何数（包括自身）都构成互质关系。")]),t._v(" "),s("h5",{attrs:{id:"第二种情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二种情况"}},[t._v("#")]),t._v(" 第二种情况")]),t._v(" "),s("p",[t._v("如果n是质数，则 φ(n)=n-1 。因为质数与小于它的每一个数，都构成互质关系。比如5与1、2、3、4都构成互质关系。")]),t._v(" "),s("h5",{attrs:{id:"第三种情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三种情况"}},[t._v("#")]),t._v(" 第三种情况")]),t._v(" "),s("p",[t._v("如果n是质数的某一个次方，即 n = p^k (p为质数，k为大于等于1的整数)，则")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://joker-1317382260.cos.ap-guangzhou.myqcloud.com/202303271452217.webp",alt:"Img"}})]),t._v(" "),s("p",[t._v("比如 φ(8) = φ(2^3) =2^3 - 2^2 = 8 -4 = 4。")]),t._v(" "),s("p",[t._v("这是因为只有当一个数不包含质数p，才可能与n互质。而包含质数p的数一共有p^(k-1)个，即1×p、2×p、3×p、…、p^(k-1)×p，把它们去除，剩下的就是与n互质的数。")]),t._v(" "),s("p",[t._v("上面的式子还可以写成下面的形式：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://joker-1317382260.cos.ap-guangzhou.myqcloud.com/202303271453181.webp",alt:"Img"}})]),t._v(" "),s("p",[t._v("可以看出，上面的第二种情况是 k=1 时的特例。")]),t._v(" "),s("h4",{attrs:{id:"rsa算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rsa算法"}},[t._v("#")]),t._v(" RSA算法")]),t._v(" "),s("p",[t._v("密钥生成步骤")]),t._v(" "),s("h5",{attrs:{id:"第一步-随机选择两个不相等的质数p和q。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一步-随机选择两个不相等的质数p和q。"}},[t._v("#")]),t._v(" 第一步，随机选择两个不相等的质数p和q。")]),t._v(" "),s("p",[t._v("假设选择61和53。（实际这两个数越大越难破解）")]),t._v(" "),s("h5",{attrs:{id:"第二步-计算pq的乘积n。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二步-计算pq的乘积n。"}},[t._v("#")]),t._v(" 第二步，计算pq的乘积n。")]),t._v(" "),s("blockquote",[s("p",[t._v("n = 61 x 53 = 3233")])]),t._v(" "),s("p",[t._v("n的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。实际应用中，RSA密钥一般是1024位，重要场合则为2048位。")]),t._v(" "),s("h5",{attrs:{id:"第三步-计算n的欧拉函数φ-n-。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三步-计算n的欧拉函数φ-n-。"}},[t._v("#")]),t._v(" 第三步，计算n的欧拉函数φ(n)。")]),t._v(" "),s("blockquote",[s("p",[t._v("φ(n) = φ(p*q) = (p-1)(q-1)")])]),t._v(" "),s("p",[t._v("φ(n) 表示：在小于等于 n 的正整数之中，与 n 构成互质关系的数的个数。")]),t._v(" "),s("p",[t._v("例：")]),t._v(" "),s("p",[t._v("在 1 到 8 之中，与 8 形成互质关系的是1、3、5、7，所以 φ(n) = 4。")])])}),[],!1,null,null,null);s.default=r.exports}}]);